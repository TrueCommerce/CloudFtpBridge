@page "/workflows"

@inject IWorkflowRepository WorkflowRepository
@inject ILegacyDataProvider LegacyDataProvider
@inject NavigationManager NavigationManager

<div class="container">

    @if (MigrationAvailable)
    {
        <div class="alert alert-info text-center mb-4" role="alert">
            <span>Workflows from an older version of Cloud FTP Bridge were found. <a @onclick="OnClickMigrate" class="alert-link" href="#">Click here</a> to migrate them.</span>
        </div>
    }

    <div class="row mb-2">
        <div class="col">
            <div class="list-group">
                @foreach (var workflow in Workflows)
                {
                    <a class="list-group-item list-group-item-action" href="@($"workflows/{workflow.Id}")">@workflow.Name</a>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <a class="btn btn-success" href="@($"workflows/{Guid.NewGuid()}")">New Workflow</a>
        </div>
    </div>

</div>

@code
{
    public IReadOnlyCollection<Workflow> Workflows { get; private set; } = Array.Empty<Workflow>();
    protected IReadOnlyCollection<Workflow> LegacyWorkflows { get; private set; } = Array.Empty<Workflow>();

    protected bool MigrationAvailable { get; set; }

    public async Task Refresh()
    {
        Workflows = await WorkflowRepository.List();

        if (Workflows.Count == 0)
        {
            LegacyWorkflows = await LegacyDataProvider.GetLegacyWorkflows();

            if (LegacyWorkflows.Count > 0)
            {
                MigrationAvailable = true;
            }
        }
    }

    protected async Task OnClickMigrate()
    {
        foreach (var legacyWorkflow in LegacyWorkflows)
        {
            await WorkflowRepository.Save(legacyWorkflow);
        }

        await Refresh();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Refresh();
    }
} 